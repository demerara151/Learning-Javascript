[1] 変数・定数
let 変数名 = 最初に設定したい値（あとで変更する可能性のあるもの）
const 定数名 = 保存したい値（再度変更する予定のないもの）


[2] 条件文（イフ文）
if (条件) {
    条件に合えば実行したい処理
    } else if (２つ目の条件) {
    最初の条件には適合しないが、この条件なら適合する場合に実行したい処理
    } else {
    どちらの条件にも合わない場合に実行させたい処理
}


[3] スイッチ構文
let 変数名 = 初期値
switch (変数) {
    case 条件１:
        条件１に合う場合これを実行する
        break
    case 条件２:
        条件２に合う場合これを実行する
        break
    case 条件３:
        条件３に合う場合これを実行する
        break
    case 条件４:
        どの条件にも合わない場合これを実行する
        break
}


[4] ループ（繰り返し文）
for (初期値の設定, 条件, イテレーター) {
    繰り返し行いたい処理
    繰り返し行いたい処理
    繰り返し行いたい処理
    繰り返し行いたい処理
}
※(1) 条件:
    aからbまでの間といった期間を設定する 例「i < 10」
※(2) イテレーター:
    初期値を増加させるもの 例「i++」


[5] ホワイルループ
let 変数名 = 初期値
while (条件) {
    繰り返し行いたい処理
    繰り返し行いたい処理
    繰り返し行いたい処理
    イテレーター
}
※continue
    条件に適合しても処理を続けたい場合に、breakの代わりに書く


[6] 関数（ファンクション）

・設定
function 関数名(仮引数) {
    実行したい内容
    実行したい内容
    実行したい内容
    return 返してほしい値
}

・実行
関数名(実引数)

※英語では仮引数をparameter（パラメーター）、実引数をargument（アーギュメント）と言う


[7] 配列（Array:アレイ）

・設定
const 配列名 = [値１,値２,値３,値４,値５]

・呼び出し
配列名[インデックス]

・操作
配列名.メソッド名()

※(1) 文字列や数値といった単純な値以外にも、真偽値やオブジェクトといったあらゆるデータ型の値を保存できる
※(2) インデックス:
配列の中に値を格納すると自動的に0から順番に番号が付けられる。それをインデックスと呼ぶ。例「const names = ["Ken","John"]; console.log(names[1]) // Johnが表示される。」
※配列はJavascriptにあらかじめ用意されている組み込みオブジェクトなので様々なメソッドが使える。


[8] オブジェクト

・設定
const オブジェクト名 = {
    キーとなる名前:キーと対になる値,
    キーとなる名前:キーと対になる値,
    キーとなる名前:キーと対になる値,
    キーとなる名前:キーと対になる値,
    関数名(仮引数) {
        実行したい内容
    },
    関数名(仮引数) {
        実行したい内容
    },
    関数名(仮引数) {
        実行したい内容
    }
}

※キーとなる名前：
    配列でいうところのインデックスと同じ。こちらは自分で任意の名前を付けることができる。
※キーと値のペアを「そのオブジェクトのプロパティ」と呼ぶ。
※オブジェクト内で設定された関数は「そのオブジェクトのメソッド」と呼ぶ。

・プロパティを呼び出す
オブジェクト名.キー名
又は、
オブジェクト名['キー名']

※前者をドット記法、後者をブラケット記法という

・メソッドを使う
オブジェクト名.メソッド名(実引数)
